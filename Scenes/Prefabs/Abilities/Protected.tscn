[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends StatusEffect

const TICK = TICK_EVENT.CUSTOM

# Should be called by the action that causes this.
# Format: 
# status_effect = se_Status_Effect_Name.new(caster, affected,
# icon, duration)
func _ready():
	caster = get_parent()
	caster.connect(\"se_turn_started\", Callable(self, \"_tick_effect\"))
	_finish_constructor(caster, caster, icon, TICK, null)
	#_tick_effect()

# override this in extending scripts
#func _apply_status_effect(_arg = null):

# override this in extending scripts
func _tick_effect(_arg = null):
	var s = se_Defending.new(caster, caster, 1)
#		(se, show = null, stacks = null,
#dur = null, extra = null):

# override this in extending scripts
#func _remove_status_effect(_arg = null):
#	pass

# The The message for when it's applied. Override it!
#func _application_message() -> String:
#	if is_buff:
#		return \"%s is buffed with %s!\" % [affected.name, name]
#	return \"%s is debuffed with %s!\" % [affected.name, name]

# To be overridden. Updates the name of the SE
#func _get_name():
#	return name
"

[node name="Protected" type="Node"]
script = SubResource( 1 )
ability = true
